name: Deploy Backend to Container in AzureVM

on:
  push:
    branches:
      - main

jobs:
  notify-start:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Telegram - Workflow Started
        run: |
          MESSAGE="ðŸš€ Novidades! Um deploy do backend do Tharseo foi iniciado... A PrevisÃ£o do tÃ©rmino Ã© de 2 minutos."
          Nosso backend opera com a url https://tharseo.zapto.com:443."
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="${MESSAGE}" \
            -d parse_mode="Markdown"

  tests-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Tharseo Tests
        run:  mvn clean test
        continue-on-error: false

  build-backend:
    needs:
      - tests-backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Inject secrets into application.properties
        run: |
          echo "spring.datasource.url=${{ secrets.DB_URL }}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application.properties
          echo "google.client.key=${{ secrets.GOOGLE_CLIENT_ID }}" >> src/main/resources/application.properties

      - name: Build Tharseo
        run:  mvn clean package

      - name: Build Docker image
        run:  |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 
          docker build -t richardguedesrib/tharseo-app:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push richardguedesrib/tharseo-app:latest

  deploy-backend:
    needs:
      - tests-backend
      - build-backend

    runs-on: ubuntu-latest
    steps:
      - name: SSH into Azure VM and stop and remove existing Docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          script: |
            docker stop $(docker ps -q --filter ancestor=richardguedesrib/tharseo-app) || true
            docker rm $(docker ps -aq --filter ancestor=richardguedesrib/tharseo-app) || true

      - name: SSH into Azure VM and pull Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          script: |
            docker login && docker pull richardguedesrib/tharseo-app:latest

      - name: SSH into Azure VM and start Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          script: |
            docker run -d -p 8080:8080 -v /home/richardguedes/tharseo/data:/app/data richardguedesrib/tharseo-app:latest

      - name: Notify Telegram - Deploy Success
        run: |
          MESSAGE="âœ… Deploy do backend do Tharseo realizado com sucesso!"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="${MESSAGE}" \
            -d parse_mode="Markdown"

      - name: Notify Telegram - Deploy Failure
        if: failure()
        run: |
          MESSAGE="ðŸš¨ Ocorreu um erro durante o deploy do backend do Tharseo. Verifique os logs do actions para maiores informaÃ§Ãµes."
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="${MESSAGE}" \
            -d parse_mode="Markdown"
